{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","state","age","email","name","errors","onNameChange","bind","onEmailChange","event","test","target","value","this","setState","e","msg","msg2","console","log","className","class","id","type","placeholder","required","onChange","style","border","min","max","cols","rows","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kNAsIeA,G,uDAjIb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OACE,CACAF,MAAO,GACPC,KAAM,KAIV,EAAKE,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAdL,E,yDAiBLE,GAEO,cACQC,KAAKD,EAAME,OAAOC,OAG1CC,KAAKC,SAAS,CAACV,KAAMK,EAAME,OAAOC,MAAOP,OAAQ,CAACD,MAAM,KAExDS,KAAKC,SAAS,CAACV,KAAMK,EAAME,OAAOC,MAAOP,OAAQ,CAACD,MAAM,O,oCAK9CK,GAEO,gDACQC,KAAKD,EAAME,OAAOC,OAG3CC,KAAKC,SAAS,CAACX,MAAOM,EAAME,OAAOC,MAAOP,OAAQ,CAACF,OAAO,KAE1DU,KAAKC,SAAS,CAACX,MAAOM,EAAME,OAAOC,MAAOP,OAAQ,CAACF,OAAO,O,kCAIlDY,M,+BAOZ,IACMC,EACAC,EAUJ,OATGJ,KAAKZ,MAAMI,OAAOD,MAAQS,KAAKZ,MAAMG,OACtCc,QAAQC,IAAI,SACZH,EAAM,0BAAMI,UAAU,SAAhB,8BAGLP,KAAKZ,MAAMI,OAAOF,OAASU,KAAKZ,MAAME,QACvCc,EAAM,0BAAMG,UAAU,SAAhB,+BAIN,yBAAKC,MAAM,aAERL,EACD,wCACA,2BAAOM,GAAG,OACRC,KAAK,OACLC,YAAY,kBACZC,UAAQ,EAACC,SAAUb,KAAKP,aACxBqB,MAAQd,KAAKZ,MAAMI,OAAOD,MAAQS,KAAKZ,MAAMG,KAAO,CAACwB,OAAQ,qBAAsB,OAEpFX,EACD,yCACA,2BAAOK,GAAG,QACRK,MAAQd,KAAKZ,MAAMI,OAAOF,OAASU,KAAKZ,MAAME,MAAQ,CAACyB,OAAQ,qBAAsB,KACrFL,KAAK,QACLC,YAAY,mBACZC,UAAQ,EAACC,SAAUb,KAAKL,gBAG1B,uCACA,2BAAOc,GAAG,MACRC,KAAK,SACLC,YAAY,MACZK,IAAI,IACJC,IAAI,QAGN,2DAoBA,gCACE,4BAAQlB,MAAM,WAAd,WACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,UAAd,qBACA,4BAAQA,MAAM,SAAd,UAGF,2BAAOU,GAAG,cAAV,iCACA,8BAAUA,GAAG,kBAAkBS,KAAK,KAAKC,KAAK,OAG9C,2BAAOV,GAAG,SAASC,KAAK,gB,GA1HbU,cCqBJC,MAnBf,WAEE,OAEE,yBAAKZ,GAAG,cAEN,yBAAKA,GAAG,aACN,wBAAIA,GAAG,SAAP,eACA,uBAAGA,GAAG,eAAN,uDAIA,kBAAC,EAAD,QCLYa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.a3e97135.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass Form extends Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      age: 0,\n      email: \"\",\n      name: \"\",\n      errors:\n        {\n        email: '',\n        name: '',\n        }\n\n    };\n    this.onNameChange = this.onNameChange.bind(this);\n    this.onEmailChange = this.onEmailChange.bind(this);\n  }\n\n  onNameChange(event) {\n\n    const validName = /^[a-zA-Z]+$/;\n    const isValid = validName.test(event.target.value);\n\n    if(isValid){\n      this.setState({name: event.target.value, errors: {name: false}});\n    }else{\n      this.setState({name: event.target.value, errors: {name: true}});\n\n    }\n  }\n\n  onEmailChange(event){\n\n    const validEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    const isValid = validEmail.test(event.target.value);\n\n    if(isValid){\n      this.setState({email: event.target.value, errors: {email: false}});\n    }else{\n      this.setState({email: event.target.value, errors: {email: true}});\n    }\n  }\n\n  handleClick(e){\n\n  }\n\n  render(){\n\n  //  const errors = this.state.errors.name;\n  let x = false;\n    let msg;\n    let msg2;\n    if(this.state.errors.name && this.state.name){\n      console.log('error');\n      msg = <span className='error'>Please enter a valid name</span>\n    }\n\n    if(this.state.errors.email && this.state.email){\n      msg2 =<span className='error'>Please enter a valid email</span>;\n    }\n\n    return(\n      <div class=\"input-div\">\n\n        {msg}\n        <label>Name:</label>\n        <input id=\"name\"\n          type=\"text\"\n          placeholder=\"Enter your name\"\n          required onChange={this.onNameChange}\n          style= {this.state.errors.name && this.state.name ? {border: \"3px solid #ff0000\"}: null}>\n        </input>\n        {msg2}\n        <label>Email:</label>\n        <input id=\"email\"\n          style= {this.state.errors.email && this.state.email ? {border: \"3px solid #ff0000\"}: null}\n          type=\"email\"\n          placeholder=\"Enter your Email\"\n          required onChange={this.onEmailChange}>\n        </input>\n\n        <label>Age:</label>\n        <input id=\"age\"\n          type=\"number\"\n          placeholder=\"Age\"\n          min=\"1\"\n          max=\"100\">\n          </input>\n\n        <label>Please select an option:</label>\n\n\n{/*\n        <div id=\"radioGroup\">\n          <input id=\"option1\" value=\"Hello\" name=\"options\" type=\"radio\"/>\n          <label id=\"option12\" for=\"Hello\">Hello</label>\n        </div>\n\n\n          <input id=\"option2\" value=\"Goodbye\" name=\"options\" type=\"radio\"/>\n\n\n          <input id=\"option3\" value=\"Yo\" name=\"options\" type=\"radio\"/>\n\n        */}\n\n\n\n\n        <select>\n          <option value=\"student\">Student</option>\n          <option value=\"full-time\">Full Time</option>\n          <option value=\"no-say\">Prefer Not to Say</option>\n          <option value=\"other\">Other</option>\n        </select>\n\n        <label id=\"text-label\"> Any comments or suggestions?</label>\n        <textarea id=\"paragraph-input\" cols='10' rows='10'/>\n\n\n        <input id=\"submit\" type=\"submit\"></input>\n\n\n      </div>\n    );\n  }\n}\n\n\nexport default Form;\n","import React from 'react';\nimport { Button, Checkbox } from 'semantic-ui-react';\nimport Form from './Form.js'\nimport './App.css';\n\nfunction App() {\n\n  return(\n\n    <div id=\"parent-div\">\n\n      <div id=\"title-div\">\n        <h1 id=\"title\">Survey Form</h1>\n        <p id=\"description\">This is a fun short survey form created with React</p>\n      </div>\n\n      \n        <Form/>\n\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}